//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Scripts/EventManager/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""32bb97dd-2f70-4769-ae9a-e04a1435c0df"",
            ""actions"": [
                {
                    ""name"": ""PrimaryFingerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""49925e8e-cf5d-414a-8803-4bb79ed4c267"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryFingerPosition"",
                    ""type"": ""Value"",
                    ""id"": ""bddfefda-86b1-41a1-8e43-489283b2330f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SecondaryTouchContact"",
                    ""type"": ""Button"",
                    ""id"": ""291506e4-b854-4bb6-9348-e36aa480d29a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryFingerPressed"",
                    ""type"": ""Button"",
                    ""id"": ""34839a18-292d-4cdf-99ab-d6def1d8f3d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryFingerDragged"",
                    ""type"": ""Value"",
                    ""id"": ""35080cb2-4474-46d1-ab42-d9c307762371"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""PrimaryFingerReleased"",
                    ""type"": ""Button"",
                    ""id"": ""062c3426-77cd-44a5-b5b0-a3abf0212b85"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""767e85f4-625e-4fbe-91dc-cfb129b5fd14"",
                    ""path"": ""<Touchscreen>/touch0/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryFingerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6402b172-33b3-4b0c-beac-dc7484331026"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryFingerPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7e57b173-749b-4783-b02a-22cf5cf47402"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryTouchContact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0689c28-c447-422d-8c38-93e83d34bb57"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryFingerPressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65f89bea-dc01-4fb2-b3c2-0c5ce954dc6b"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryFingerDragged"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""004ad037-d2b4-4488-9d32-f3f18cf41b99"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryFingerReleased"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Mouse"",
            ""id"": ""f50af493-153f-445f-8d2f-95eb60c92fbc"",
            ""actions"": [
                {
                    ""name"": ""MouseL1Pressed"",
                    ""type"": ""Button"",
                    ""id"": ""e244521b-8778-4374-b296-9855dcdfd5a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseL1Dragged"",
                    ""type"": ""Value"",
                    ""id"": ""7fd5fdf3-147c-4f27-82fc-9356de182891"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MouseL1Released"",
                    ""type"": ""Button"",
                    ""id"": ""b21af5e7-d561-49e5-83ad-2805f60fa317"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseScrollWheel"",
                    ""type"": ""Value"",
                    ""id"": ""6f21ff0a-8ce1-4dc9-a7cc-0c13a8e3c46c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""47df2d4b-e52f-4aa4-8ace-52d12c16da99"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseL1Pressed"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f30207b-5b27-4dd8-9b91-e0be17f49d8b"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseL1Dragged"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7f3fdccc-3c41-486c-9ffc-f0f7826fb49b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseL1Released"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6edc2b02-a821-408b-bc56-9753a2d51ce8"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseScrollWheel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Touch
        m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
        m_Touch_PrimaryFingerPosition = m_Touch.FindAction("PrimaryFingerPosition", throwIfNotFound: true);
        m_Touch_SecondaryFingerPosition = m_Touch.FindAction("SecondaryFingerPosition", throwIfNotFound: true);
        m_Touch_SecondaryTouchContact = m_Touch.FindAction("SecondaryTouchContact", throwIfNotFound: true);
        m_Touch_PrimaryFingerPressed = m_Touch.FindAction("PrimaryFingerPressed", throwIfNotFound: true);
        m_Touch_PrimaryFingerDragged = m_Touch.FindAction("PrimaryFingerDragged", throwIfNotFound: true);
        m_Touch_PrimaryFingerReleased = m_Touch.FindAction("PrimaryFingerReleased", throwIfNotFound: true);
        // Mouse
        m_Mouse = asset.FindActionMap("Mouse", throwIfNotFound: true);
        m_Mouse_MouseL1Pressed = m_Mouse.FindAction("MouseL1Pressed", throwIfNotFound: true);
        m_Mouse_MouseL1Dragged = m_Mouse.FindAction("MouseL1Dragged", throwIfNotFound: true);
        m_Mouse_MouseL1Released = m_Mouse.FindAction("MouseL1Released", throwIfNotFound: true);
        m_Mouse_MouseScrollWheel = m_Mouse.FindAction("MouseScrollWheel", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Touch
    private readonly InputActionMap m_Touch;
    private List<ITouchActions> m_TouchActionsCallbackInterfaces = new List<ITouchActions>();
    private readonly InputAction m_Touch_PrimaryFingerPosition;
    private readonly InputAction m_Touch_SecondaryFingerPosition;
    private readonly InputAction m_Touch_SecondaryTouchContact;
    private readonly InputAction m_Touch_PrimaryFingerPressed;
    private readonly InputAction m_Touch_PrimaryFingerDragged;
    private readonly InputAction m_Touch_PrimaryFingerReleased;
    public struct TouchActions
    {
        private @InputActions m_Wrapper;
        public TouchActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @PrimaryFingerPosition => m_Wrapper.m_Touch_PrimaryFingerPosition;
        public InputAction @SecondaryFingerPosition => m_Wrapper.m_Touch_SecondaryFingerPosition;
        public InputAction @SecondaryTouchContact => m_Wrapper.m_Touch_SecondaryTouchContact;
        public InputAction @PrimaryFingerPressed => m_Wrapper.m_Touch_PrimaryFingerPressed;
        public InputAction @PrimaryFingerDragged => m_Wrapper.m_Touch_PrimaryFingerDragged;
        public InputAction @PrimaryFingerReleased => m_Wrapper.m_Touch_PrimaryFingerReleased;
        public InputActionMap Get() { return m_Wrapper.m_Touch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
        public void AddCallbacks(ITouchActions instance)
        {
            if (instance == null || m_Wrapper.m_TouchActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TouchActionsCallbackInterfaces.Add(instance);
            @PrimaryFingerPosition.started += instance.OnPrimaryFingerPosition;
            @PrimaryFingerPosition.performed += instance.OnPrimaryFingerPosition;
            @PrimaryFingerPosition.canceled += instance.OnPrimaryFingerPosition;
            @SecondaryFingerPosition.started += instance.OnSecondaryFingerPosition;
            @SecondaryFingerPosition.performed += instance.OnSecondaryFingerPosition;
            @SecondaryFingerPosition.canceled += instance.OnSecondaryFingerPosition;
            @SecondaryTouchContact.started += instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.performed += instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.canceled += instance.OnSecondaryTouchContact;
            @PrimaryFingerPressed.started += instance.OnPrimaryFingerPressed;
            @PrimaryFingerPressed.performed += instance.OnPrimaryFingerPressed;
            @PrimaryFingerPressed.canceled += instance.OnPrimaryFingerPressed;
            @PrimaryFingerDragged.started += instance.OnPrimaryFingerDragged;
            @PrimaryFingerDragged.performed += instance.OnPrimaryFingerDragged;
            @PrimaryFingerDragged.canceled += instance.OnPrimaryFingerDragged;
            @PrimaryFingerReleased.started += instance.OnPrimaryFingerReleased;
            @PrimaryFingerReleased.performed += instance.OnPrimaryFingerReleased;
            @PrimaryFingerReleased.canceled += instance.OnPrimaryFingerReleased;
        }

        private void UnregisterCallbacks(ITouchActions instance)
        {
            @PrimaryFingerPosition.started -= instance.OnPrimaryFingerPosition;
            @PrimaryFingerPosition.performed -= instance.OnPrimaryFingerPosition;
            @PrimaryFingerPosition.canceled -= instance.OnPrimaryFingerPosition;
            @SecondaryFingerPosition.started -= instance.OnSecondaryFingerPosition;
            @SecondaryFingerPosition.performed -= instance.OnSecondaryFingerPosition;
            @SecondaryFingerPosition.canceled -= instance.OnSecondaryFingerPosition;
            @SecondaryTouchContact.started -= instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.performed -= instance.OnSecondaryTouchContact;
            @SecondaryTouchContact.canceled -= instance.OnSecondaryTouchContact;
            @PrimaryFingerPressed.started -= instance.OnPrimaryFingerPressed;
            @PrimaryFingerPressed.performed -= instance.OnPrimaryFingerPressed;
            @PrimaryFingerPressed.canceled -= instance.OnPrimaryFingerPressed;
            @PrimaryFingerDragged.started -= instance.OnPrimaryFingerDragged;
            @PrimaryFingerDragged.performed -= instance.OnPrimaryFingerDragged;
            @PrimaryFingerDragged.canceled -= instance.OnPrimaryFingerDragged;
            @PrimaryFingerReleased.started -= instance.OnPrimaryFingerReleased;
            @PrimaryFingerReleased.performed -= instance.OnPrimaryFingerReleased;
            @PrimaryFingerReleased.canceled -= instance.OnPrimaryFingerReleased;
        }

        public void RemoveCallbacks(ITouchActions instance)
        {
            if (m_Wrapper.m_TouchActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITouchActions instance)
        {
            foreach (var item in m_Wrapper.m_TouchActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TouchActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TouchActions @Touch => new TouchActions(this);

    // Mouse
    private readonly InputActionMap m_Mouse;
    private List<IMouseActions> m_MouseActionsCallbackInterfaces = new List<IMouseActions>();
    private readonly InputAction m_Mouse_MouseL1Pressed;
    private readonly InputAction m_Mouse_MouseL1Dragged;
    private readonly InputAction m_Mouse_MouseL1Released;
    private readonly InputAction m_Mouse_MouseScrollWheel;
    public struct MouseActions
    {
        private @InputActions m_Wrapper;
        public MouseActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseL1Pressed => m_Wrapper.m_Mouse_MouseL1Pressed;
        public InputAction @MouseL1Dragged => m_Wrapper.m_Mouse_MouseL1Dragged;
        public InputAction @MouseL1Released => m_Wrapper.m_Mouse_MouseL1Released;
        public InputAction @MouseScrollWheel => m_Wrapper.m_Mouse_MouseScrollWheel;
        public InputActionMap Get() { return m_Wrapper.m_Mouse; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseActions set) { return set.Get(); }
        public void AddCallbacks(IMouseActions instance)
        {
            if (instance == null || m_Wrapper.m_MouseActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MouseActionsCallbackInterfaces.Add(instance);
            @MouseL1Pressed.started += instance.OnMouseL1Pressed;
            @MouseL1Pressed.performed += instance.OnMouseL1Pressed;
            @MouseL1Pressed.canceled += instance.OnMouseL1Pressed;
            @MouseL1Dragged.started += instance.OnMouseL1Dragged;
            @MouseL1Dragged.performed += instance.OnMouseL1Dragged;
            @MouseL1Dragged.canceled += instance.OnMouseL1Dragged;
            @MouseL1Released.started += instance.OnMouseL1Released;
            @MouseL1Released.performed += instance.OnMouseL1Released;
            @MouseL1Released.canceled += instance.OnMouseL1Released;
            @MouseScrollWheel.started += instance.OnMouseScrollWheel;
            @MouseScrollWheel.performed += instance.OnMouseScrollWheel;
            @MouseScrollWheel.canceled += instance.OnMouseScrollWheel;
        }

        private void UnregisterCallbacks(IMouseActions instance)
        {
            @MouseL1Pressed.started -= instance.OnMouseL1Pressed;
            @MouseL1Pressed.performed -= instance.OnMouseL1Pressed;
            @MouseL1Pressed.canceled -= instance.OnMouseL1Pressed;
            @MouseL1Dragged.started -= instance.OnMouseL1Dragged;
            @MouseL1Dragged.performed -= instance.OnMouseL1Dragged;
            @MouseL1Dragged.canceled -= instance.OnMouseL1Dragged;
            @MouseL1Released.started -= instance.OnMouseL1Released;
            @MouseL1Released.performed -= instance.OnMouseL1Released;
            @MouseL1Released.canceled -= instance.OnMouseL1Released;
            @MouseScrollWheel.started -= instance.OnMouseScrollWheel;
            @MouseScrollWheel.performed -= instance.OnMouseScrollWheel;
            @MouseScrollWheel.canceled -= instance.OnMouseScrollWheel;
        }

        public void RemoveCallbacks(IMouseActions instance)
        {
            if (m_Wrapper.m_MouseActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMouseActions instance)
        {
            foreach (var item in m_Wrapper.m_MouseActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MouseActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MouseActions @Mouse => new MouseActions(this);
    public interface ITouchActions
    {
        void OnPrimaryFingerPosition(InputAction.CallbackContext context);
        void OnSecondaryFingerPosition(InputAction.CallbackContext context);
        void OnSecondaryTouchContact(InputAction.CallbackContext context);
        void OnPrimaryFingerPressed(InputAction.CallbackContext context);
        void OnPrimaryFingerDragged(InputAction.CallbackContext context);
        void OnPrimaryFingerReleased(InputAction.CallbackContext context);
    }
    public interface IMouseActions
    {
        void OnMouseL1Pressed(InputAction.CallbackContext context);
        void OnMouseL1Dragged(InputAction.CallbackContext context);
        void OnMouseL1Released(InputAction.CallbackContext context);
        void OnMouseScrollWheel(InputAction.CallbackContext context);
    }
}
